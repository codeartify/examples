[ParkingReservationRequest(reservedBy=null, startTime=null, endTime=null), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1734343965] => java.lang.NullPointerException: Cannot invoke "java.time.temporal.Temporal.until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)" because "startInclusive" is null 
[ParkingReservationRequest(reservedBy=null, startTime=null, endTime=null), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1445999733] => java.lang.NullPointerException: Cannot invoke "java.time.temporal.Temporal.until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)" because "startInclusive" is null 
[ParkingReservationRequest(reservedBy=null, startTime=null, endTime=null), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1734343965] => java.lang.NullPointerException: Cannot invoke "java.time.temporal.Temporal.until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)" because "startInclusive" is null 
[ParkingReservationRequest(reservedBy=null, startTime=null, endTime=null), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1445999733] => java.lang.NullPointerException: Cannot invoke "java.time.temporal.Temporal.until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)" because "startInclusive" is null 
[ParkingReservationRequest(reservedBy=Olly, startTime=null, endTime=null), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1734343965] => java.lang.NullPointerException: Cannot invoke "java.time.temporal.Temporal.until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)" because "startInclusive" is null 
[ParkingReservationRequest(reservedBy=Olly, startTime=null, endTime=null), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1445999733] => java.lang.NullPointerException: Cannot invoke "java.time.temporal.Temporal.until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)" because "startInclusive" is null 
[ParkingReservationRequest(reservedBy=Olly, startTime=null, endTime=null), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1734343965] => java.lang.NullPointerException: Cannot invoke "java.time.temporal.Temporal.until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)" because "startInclusive" is null 
[ParkingReservationRequest(reservedBy=Olly, startTime=null, endTime=null), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1445999733] => java.lang.NullPointerException: Cannot invoke "java.time.temporal.Temporal.until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)" because "startInclusive" is null 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T01:01, endTime=null), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1734343965] => java.lang.NullPointerException: temporal 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T01:01, endTime=null), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1445999733] => java.lang.NullPointerException: temporal 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T01:01, endTime=null), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1734343965] => java.lang.NullPointerException: temporal 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T01:01, endTime=null), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1445999733] => java.lang.NullPointerException: temporal 
[ParkingReservationRequest(reservedBy=Olly, startTime=null, endTime=2020-01-01T08:01), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1734343965] => java.lang.NullPointerException: Cannot invoke "java.time.temporal.Temporal.until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)" because "startInclusive" is null 
[ParkingReservationRequest(reservedBy=Olly, startTime=null, endTime=2020-01-01T08:01), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1445999733] => java.lang.NullPointerException: Cannot invoke "java.time.temporal.Temporal.until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)" because "startInclusive" is null 
[ParkingReservationRequest(reservedBy=Olly, startTime=null, endTime=2020-01-01T08:01), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1734343965] => java.lang.NullPointerException: Cannot invoke "java.time.temporal.Temporal.until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)" because "startInclusive" is null 
[ParkingReservationRequest(reservedBy=Olly, startTime=null, endTime=2020-01-01T08:01), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1445999733] => java.lang.NullPointerException: Cannot invoke "java.time.temporal.Temporal.until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit)" because "startInclusive" is null 
[ParkingReservationRequest(reservedBy=null, startTime=2020-01-01T08:00, endTime=2020-01-01T08:01), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1734343965] => <400 BAD_REQUEST Bad Request,Reservation must be at least 30 minutes long.,[]> 
[ParkingReservationRequest(reservedBy=null, startTime=2020-01-01T08:00, endTime=2020-01-01T08:01), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1445999733] => <400 BAD_REQUEST Bad Request,Reservation must be at least 30 minutes long.,[]> 
[ParkingReservationRequest(reservedBy=null, startTime=2020-01-01T08:00, endTime=2020-01-01T08:01), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1734343965] => <400 BAD_REQUEST Bad Request,Reservation must be at least 30 minutes long.,[]> 
[ParkingReservationRequest(reservedBy=null, startTime=2020-01-01T08:00, endTime=2020-01-01T08:01), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1445999733] => <400 BAD_REQUEST Bad Request,Reservation must be at least 30 minutes long.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T19:05, endTime=2020-01-01T08:10), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1734343965] => <400 BAD_REQUEST Bad Request,Reservation must be at least 30 minutes long.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T19:05, endTime=2020-01-01T08:10), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1445999733] => <400 BAD_REQUEST Bad Request,Reservation must be at least 30 minutes long.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T19:05, endTime=2020-01-01T08:10), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1734343965] => <400 BAD_REQUEST Bad Request,Reservation must be at least 30 minutes long.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T19:05, endTime=2020-01-01T08:10), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1445999733] => <400 BAD_REQUEST Bad Request,Reservation must be at least 30 minutes long.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T08:00, endTime=2020-01-01T08:01), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1734343965] => <400 BAD_REQUEST Bad Request,Reservation must be at least 30 minutes long.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T08:00, endTime=2020-01-01T08:01), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1445999733] => <400 BAD_REQUEST Bad Request,Reservation must be at least 30 minutes long.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T08:00, endTime=2020-01-01T08:01), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1734343965] => <400 BAD_REQUEST Bad Request,Reservation must be at least 30 minutes long.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T08:00, endTime=2020-01-01T08:01), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1445999733] => <400 BAD_REQUEST Bad Request,Reservation must be at least 30 minutes long.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T19:00, endTime=2020-01-01T22:01), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1734343965] => <400 BAD_REQUEST Bad Request,Reservations can only be made between 6:00 AM and 10:00 PM.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T19:00, endTime=2020-01-01T22:01), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1445999733] => <400 BAD_REQUEST Bad Request,Reservations can only be made between 6:00 AM and 10:00 PM.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T19:00, endTime=2020-01-01T22:01), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1734343965] => <400 BAD_REQUEST Bad Request,Reservations can only be made between 6:00 AM and 10:00 PM.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T19:00, endTime=2020-01-01T22:01), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1445999733] => <400 BAD_REQUEST Bad Request,Reservations can only be made between 6:00 AM and 10:00 PM.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T08:00, endTime=2020-01-01T08:30), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1734343965] => <409 CONFLICT Conflict,You already have an active reservation.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T08:00, endTime=2020-01-01T08:30), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1445999733] => <409 CONFLICT Conflict,You already have an active reservation.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T08:00, endTime=2020-01-01T08:30), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1734343965] => <404 NOT_FOUND Not Found,No available spot left.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T08:00, endTime=2020-01-01T08:30), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1445999733] => <201 CREATED Created,ParkingReservationResponse(reservationId=null, spotId=null, reservedBy=Olly, startTime=2020-01-01T08:00, endTime=2020-01-01T08:30),[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T08:00, endTime=2020-01-01T08:31), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1734343965] => <409 CONFLICT Conflict,You already have an active reservation.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T08:00, endTime=2020-01-01T08:31), Mock for ParkingReservationRepository, hashCode: 689448569, Mock for ParkingSpotRepository, hashCode: 1445999733] => <409 CONFLICT Conflict,You already have an active reservation.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T08:00, endTime=2020-01-01T08:31), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1734343965] => <404 NOT_FOUND Not Found,No available spot left.,[]> 
[ParkingReservationRequest(reservedBy=Olly, startTime=2020-01-01T08:00, endTime=2020-01-01T08:31), Mock for ParkingReservationRepository, hashCode: 1970856042, Mock for ParkingSpotRepository, hashCode: 1445999733] => <201 CREATED Created,ParkingReservationResponse(reservationId=null, spotId=null, reservedBy=Olly, startTime=2020-01-01T08:00, endTime=2020-01-01T08:31),[]> 
